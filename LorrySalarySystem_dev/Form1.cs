using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraReports.UI;
using DevExpress.XtraReports.UserDesigner;
using DevExpress.XtraEditors;

namespace LorrySalarySystem_dev
{
    public partial class Form1 : MasterForm
    {
        Library lib = new Library();
        Salary sa = new Salary();
        // Report.XtraReport1 report = new Report.XtraReport1();
        Report.XtraReport2 report = new Report.XtraReport2();
        //Report.XtraReport3 report3 = new Report.XtraReport3();


        public Form1()
        {
            InitializeComponent();
            WindowState = FormWindowState.Maximized;
            cboxDriver.Text = string.Empty;
            sa.Date = dtPicDate.Value;
            sa.DODate = dtPicDoDate.Value;
            //dtGvSalaryReport.DataSource = lib.disp_Salary();

            roleid = lib.getUserRoleID(username);

            switch (roleid)
            {
                case 1: //Admin
                    tabControl1.TabPages.RemoveByKey("Administrator");
                    tabControl1.TabPages.RemoveByKey("Trip_Entry");
                    break;
                case 2: //General user
                    tabControl1.TabPages.RemoveByKey("Verify_Approve");
                    tabControl1.TabPages.RemoveByKey("User_Maintain");
                    break;
                case 3: //System Admin
                    break;

            }

            
            // This line of code is generated by Data Source Configuration Wizard
            vw_DriverTableAdapter2.Fill(vwDriver1.vw_Driver);
            // This line of code is generated by Data Source Configuration Wizard
            vw_DriverTableAdapter3.Fill(vwDriver2.vw_Driver);
            refreshData();
        }

        private void refreshData()
        {
            lblID.Text = "";
            salblRateID.Text = "";
            disp_lorry();
            disp_driver();
            disp_cbox_fromDestination();

            disp_cbox_search_lorry();
            disp_cbox_search_driver();

            //ReportPrintTool printTool = new ReportPrintTool(report);
            //printTool.ShowPreviewDialog();
            report.CreateDocument(true);
            disp_report_header();
        }

        public void disp_lorry()
        {
            DataTable dt = new DataTable("Lorry");
            DataRow dr;
            dt = lib.disp_lorry();

            for (int i = dt.Rows.Count - 1; i >= 0; i--)
            {
                dr = dt.Rows[i];
                if (dr["StatusName"].ToString() != "Approved")
                {
                    dr.Delete();
                }
            }
            dr = dt.NewRow();
            dr["LorryNo"] = "";
            dt.Rows.InsertAt(dr, 0);
            cboxLorry.ValueMember = "LorryNo";
            cboxLorry.DisplayMember = "LorryNo";
            cboxLorry.DataSource = dt;
        }

        public void disp_cbox_search_lorry()
        {
            DataTable dt = new DataTable("Lorry");
            DataRow dr;
            dt = lib.disp_lorry();

            for (int i = dt.Rows.Count - 1; i >= 0; i--)
            {
                dr = dt.Rows[i];
                if (dr["StatusName"].ToString() != "Approved")
                {
                    dr.Delete();
                }
            }
            dr = dt.NewRow();
            dr["LorryNo"] = "";
            dt.Rows.InsertAt(dr, 0);

            cboxFilterLorry.ValueMember = "LorryNo";
            cboxFilterLorry.DisplayMember = "LorryNo";
            cboxFilterLorry.DataSource = dt;

            cboxFilterLorry2.ValueMember = "LorryNo";
            cboxFilterLorry2.DisplayMember = "LorryNo";
            cboxFilterLorry2.DataSource = dt;
        }

        public void disp_driver()
        {
            DataTable dt = new DataTable("Driver");
            dt = lib.disp_driver();
            DataRow dr = dt.NewRow();
            dr["DriverName"] = "";
            dt.Rows.InsertAt(dr, 0);
            cboxDriver.ValueMember = "DriverName";
            cboxDriver.DisplayMember = "DriverName";
            cboxDriver.DataSource = dt;

            
        }

        public void disp_cbox_search_driver()
        {
            DataTable dt = new DataTable("Driver");
            dt = lib.disp_driver();
            DataRow dr = dt.NewRow();
            dr["DriverName"] = "";
            dt.Rows.InsertAt(dr, 0);

            cboxFilterDriver.ValueMember = "DriverName";
            cboxFilterDriver.DisplayMember = "DriverName";
            cboxFilterDriver.DataSource = dt;

            cboxFilterDriver2.ValueMember = "DriverName";
            cboxFilterDriver2.DisplayMember = "DriverName";
            cboxFilterDriver2.DataSource = dt;
        }

        public void disp_cbox_fromDestination()
        {
            DataTable dt = new DataTable("From");
            dt = lib.disp_FromDestination();
            DataRow dr = dt.NewRow();
            dr["From"] = "";
            dt.Rows.InsertAt(dr, 0);
            cboxFrom.ValueMember = "From";
            cboxFrom.DisplayMember = "From";
            cboxFrom.DataSource = dt; 
        }

        public void disp_cbox_toDestination()
        {
            if (cboxFrom.SelectedValue !=null)
            {
                DataTable dt = new DataTable("To");
                dt = lib.disp_ToDestination(cboxFrom.SelectedValue.ToString());
                DataRow dr = dt.NewRow();
                dr["To"] = "";
                dt.Rows.InsertAt(dr, 0);
                cboxTo.ValueMember = "To";
                cboxTo.DisplayMember = "To";
                cboxTo.DataSource = dt;
                lblTripRate.Text = "0";
                lblAmountCount.Text = "0";
            }
            
        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void tableLayoutPanel4_Paint(object sender, PaintEventArgs e)
        {

        }

        

        private void dtGVSetupRate_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (GVSetupRate.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = GVSetupRate.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {
                        v.Visible = true;
                        lblUpdateFrom.Visible = true;
                        lblUpdateTo.Visible = true;
                        txtUpdateFrom.Text = GVSetupRate.Rows[e.RowIndex].Cells["p_From"].Value.ToString();
                        txtUpdateTo.Text = GVSetupRate.Rows[e.RowIndex].Cells["p_To"].Value.ToString();
                        txtUpdateWeightRate.Text = GVSetupRate.Rows[e.RowIndex].Cells["p_WeightRate"].Value.ToString();
                        txtUpdateTripRate.Text = GVSetupRate.Rows[e.RowIndex].Cells["p_TripRate"].Value.ToString();
                        lblRateID.Text = GVSetupRate.Rows[e.RowIndex].Cells["p_RateID"].Value.ToString();   
                    }

                }

                
            }
            
                                
           
        }

        private void btnEditRate_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to update this Rate?", "Information", MessageBoxButtons.YesNo);
            if (d == DialogResult.Yes)
            {
                lib.updateRate( int.Parse(lblRateID.Text), txtUpdateFrom.Text, txtUpdateTo.Text, Decimal.Parse(txtUpdateWeightRate.Text.ToString()), Decimal.Parse(txtUpdateTripRate.Text.ToString()), 2);
                GVSetupRate.DataSource = lib.disp_rate();
                MessageBox.Show("Suceess to Update Rate", "Success", MessageBoxButtons.OK);
            }
        }

        private void btnReject_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to reject this Lorry?", "Warning", MessageBoxButtons.YesNo);
            if (d == DialogResult.Yes)
            {
                lib.updateLorry(int.Parse(lblApvLorryID.Text), lblApvLorryNo.Text, decimal.Parse(lblApvComRate.Text), 4); //4 is reject status
                MessageBox.Show("This Lorry is Rejected.", "Message");
                dtGvApvLorry.DataSource = lib.disp_lorry();
                refreshData();
            }
        }

        private void btnAddRate_Click(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(txtAddFrom.Text) || String.IsNullOrEmpty(txtAddTo.Text) || String.IsNullOrEmpty(txtAddWeightRate.Text))
            {
                MessageBox.Show("Make Sure input is not blank!", "Success", MessageBoxButtons.OK);
            }

            else
            {
                if (!lib.checkRateExist(txtAddFrom.Text, txtAddTo.Text))
                {
                    DialogResult d = MessageBox.Show("Are you sure want to add new rate?", "Information", MessageBoxButtons.OKCancel);
                    if (d == DialogResult.OK)
                    {

                        try
                        {
                            lib.insertNewRate(txtAddFrom.Text, txtAddTo.Text, Decimal.Parse(txtAddWeightRate.Text.ToString()), Decimal.Parse(txtAddTripRate.Text.ToString()), 2);
                            GVSetupRate.DataSource = lib.disp_rate();
                            MessageBox.Show("Add Rate Successfully!", "Success", MessageBoxButtons.OK);
                        }
                        catch (Exception ex)
                        { MessageBox.Show(ex.ToString(), "Error"); }
                        finally
                        {
                            txtAddFrom.Text = string.Empty;
                            txtAddTo.Text = string.Empty;
                            txtAddTripRate.Text = string.Empty;
                            txtAddWeightRate.Text = string.Empty;
                        }
                    }

                }
                else
                {
                    MessageBox.Show("This rate is existed!", "Failed");
                }
            }
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void tableLayoutPanel2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void tableLayoutPanel3_Paint(object sender, PaintEventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void groupBox4_Enter(object sender, EventArgs e)
        {

        }

        private void dtGVSetupRate_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void groupBox2_Enter(object sender, EventArgs e)
        {

        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void txtEditFrom_TextChanged(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void txtEditRate_TextChanged(object sender, EventArgs e)
        {

        }

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void txtEditTo_TextChanged(object sender, EventArgs e)
        {

        }

        private void groupBox3_Enter(object sender, EventArgs e)
        {

        }

        private void txtAddFrom_TextChanged(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void txtAddRate_TextChanged(object sender, EventArgs e)
        {

        }

        private void label8_Click(object sender, EventArgs e)
        {

        }

        private void txtAddTo_TextChanged(object sender, EventArgs e)
        {

        }

        private void groupBox5_Enter(object sender, EventArgs e)
        {

        }

        private void dtGVApproveRate_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void tabPage4_Click(object sender, EventArgs e)
        {

        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void tabPage5_Click(object sender, EventArgs e)
        {

        }

        private void label13_Click(object sender, EventArgs e)
        {

        }

        private void Administrator_Click(object sender, EventArgs e)
        {

        }

        private void tabControl2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tabPage6_Click(object sender, EventArgs e)
        {

        }

        private void tabPage7_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click_1(object sender, EventArgs e)
        {

        }

        private void label11_Click_1(object sender, EventArgs e)
        {

        }

        private void rbtnGeneral_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnGeneral.Checked)
                rbtnAdmin.Checked = false;
        }

        private void rbtnAdmin_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnAdmin.Checked)
                rbtnGeneral.Checked = false;
        }

        private void tabControl3_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lblFilterLorry_Click(object sender, EventArgs e)
        {

        }

        private void dateTimePicker2_ValueChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            DataTable dt = lib.disp_search_salary(dateTimePicker1.Value.ToString("yyyy-MM-dd"), dateTimePicker2.Value.ToString("yyyy-MM-dd"), cboxFilterDriver.Text, cboxFilterLorry.Text);
            dtGvSalaryReport.DataSource = dt;

            MessageBox.Show("Search Result Success!", "Success");
        }

        private void btnSubmitUser_Click(object sender, EventArgs e)
        {
            if (txtUserName.Text == string.Empty )
            {
                MessageBox.Show("Username cannot be blank!", "Error");
            }
            else
            {
                if (lib.checkUserExists(txtUserName.Text))
                {
                    DialogResult d =  MessageBox.Show("User is already existed, do you want to update this user info?", "Warning", MessageBoxButtons.YesNo);
                    if( d == DialogResult.Yes)
                    {
                        try
                        {
                            if (rbtnAdmin.Checked == true)
                            { lblRoleID_hidden.Text = "1"; } //1 = Admin
                            else
                            { lblRoleID_hidden.Text = "2"; } //2 = General User

                            if (rbtnActive.Checked == true)
                            { lblUserStatus_hidden.Text = "1"; } //1 = Active
                            else
                            { lblUserStatus_hidden.Text = "3"; } //3 = Deactive
                            lib.updateUserRoleStatus(int.Parse(lblUserID_hidden.Text), lblUsername_hidden.Text.ToString(), int.Parse(lblRoleID_hidden.Text.ToString()), int.Parse(lblUserStatus_hidden.Text.ToString()));
                            MessageBox.Show("User info is updated!", "Success");
                        }
                        catch (Exception ex)
                        { MessageBox.Show(ex.ToString(), "Error"); }
                        finally
                        {
                            refreshuserinfo();                

                        }
                    }

                }
                else
                { 
                    MessageBox.Show("Are you sure want to add new user?", "Warning", MessageBoxButtons.OKCancel);
                    try
                    {
                        if (rbtnAdmin.Checked == true)
                        { lblRoleID_hidden.Text = "1"; } //1 = Admin
                        else
                        { lblRoleID_hidden.Text = "2"; } //2 = General User

                        if (rbtnActive.Checked == true)
                        { lblUserStatus_hidden.Text = "1"; } //1 = Active
                        else
                        { lblUserStatus_hidden.Text = "3"; } //3 = Deactive
                        lib.insertNewUser(txtUserName.Text, "password", int.Parse(lblRoleID_hidden.Text), int.Parse(lblUserStatus_hidden.Text));
                        MessageBox.Show("New user is added, default password is password", "Success");

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.ToString(), "Error");
                    }
                    finally
                    {
                        refreshuserinfo();
                        
                    }
                }
            }
        }

        private void refreshuserinfo()
        {
            txtUserName.Text = string.Empty;
            rbtnGeneral.Checked = true;
            rbtnAdmin.Checked = false;
            rbtnActive.Checked = true;
            rbtnInactive.Checked = false;
            // txtPassword.Text = string.Empty;

            lblUserID_hidden.Text = string.Empty;
            lblUsername_hidden.Text = string.Empty;
            lblUserStatus_hidden.Text = string.Empty;
            lblRoleID_hidden.Text = string.Empty;
            lblRoleName_hidden.Text = string.Empty;

            dtDVUser.DataSource = lib.disp_userinfo();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'dsSalary.vw_UserInfo' table. You can move, or remove it, as needed.
            this.vw_UserInfoTableAdapter.Fill(this.dsSalary.vw_UserInfo);
            // TODO: This line of code loads data into the 'dsSalary.vw_Lorry' table. You can move, or remove it, as needed.
            this.vw_LorryTableAdapter1.Fill(this.dsSalary.vw_Lorry);
            // TODO: This line of code loads data into the 'dsSalary.vw_Driver' table. You can move, or remove it, as needed.
            this.vw_DriverTableAdapter1.Fill(this.dsSalary.vw_Driver);
            // TODO: This line of code loads data into the 'dsSalary.vw_Rate' table. You can move, or remove it, as needed.
            this.vw_RateTableAdapter.Fill(this.dsSalary.vw_Rate);
            // TODO: This line of code loads data into the 'dsSalary.vw_Salary' table. You can move, or remove it, as needed.
            this.vw_SalaryTableAdapter.Fill(this.dsSalary.vw_Salary);
            // TODO: This line of code loads data into the 'dBLORRRYSALARYDataSet6.vw_Salary' table. You can move, or remove it, as needed.
            //this.vw_SalaryTableAdapter1.Fill(this.dBLORRRYSALARYDataSet6.vw_Salary);
            // TODO: This line of code loads data into the 'dBLORRRYSALARYDataSet5.vw_Lorry' table. You can move, or remove it, as needed.
            // this.vw_LorryTableAdapter1.Fill(this.dBLORRRYSALARYDataSet5.vw_Lorry);
            // TODO: This line of code loads data into the 'dBLORRRYSALARYDataSet4.vw_Salary' table. You can move, or remove it, as needed.
            //  this.vw_SalaryTableAdapter.Fill(this.dBLORRRYSALARYDataSet4.vw_Salary);
            // TODO: This line of code loads data into the 'vwLorry.vw_Lorry' table. You can move, or remove it, as needed.
            // this.vw_LorryTableAdapter.Fill(this.vwLorry.vw_Lorry);
            // TODO: This line of code loads data into the 'vwDriver.vw_Driver' table. You can move, or remove it, as needed.
            //this.vw_DriverTableAdapter.Fill(this.vwDriver.vw_Driver);
            // TODO: This line of code loads data into the 'dbLorrrySalaryDataSet3.tblSalary_Detail' table. You can move, or remove it, as needed.
            // this.tblSalary_DetailTableAdapter.Fill(this.dbLorrrySalaryDataSet3.tblSalary_Detail);
            // TODO: This line of code loads data into the 'dbLorrrySalaryDataSet2.vw_Rate' table. You can move, or remove it, as needed.
            // this.vw_RateTableAdapter1.Fill(this.dbLorrrySalaryDataSet2.vw_Rate);
            //  // TODO: This line of code loads data into the 'dbLorrrySalaryDSRate.vw_Rate' table. You can move, or remove it, as needed.
            // this.vw_RateTableAdapter.Fill(this.dbLorrrySalaryDataSet1.vw_Rate);
            // TODO: This line of code loads data into the 'dbLorrrySalaryDataSet.tblRate' table. You can move, or remove it, as needed.
            // this.tblRateTableAdapter.Fill(this.dbLorrrySalaryDataSet.tblRate);


        }

        private void dtGvRate_SelectionChanged(object sender, EventArgs e)
        {
            //v.Visible = true;
            //lblUpdateFrom.Visible = true;
            //lblUpdateTo.Visible = true;

            //foreach (DataGridViewRow row in GVSetupRate.SelectedRows)
            //{
            //    string value1 = row.Cells[0].Value.ToString();
            //    string value2 = row.Cells[1].Value.ToString();

            //    txtUpdateFrom.Text = row.Cells["From"].Value.ToString();
            //    txtUpdateTo.Text = row.Cells["To"].Value.ToString();
            //    txtUpdateWeightRate.Text = row.Cells["WeightRate"].Value.ToString();
            //    txtUpdateTripRate.Text = row.Cells["TripRate"].Value.ToString();
            //    lblRateID.Text = row.Cells["RateID"].Value.ToString();
            //}

            if (GVSetupRate.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = GVSetupRate.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {
                        v.Visible = true;
                        lblUpdateFrom.Visible = true;
                        lblUpdateTo.Visible = true;
                        foreach (DataGridViewRow row in GVSetupRate.SelectedRows)
                        {
                            string value1 = row.Cells[0].Value.ToString();
                            string value2 = row.Cells[1].Value.ToString();

                            txtUpdateFrom.Text = row.Cells["p_From"].Value.ToString();
                            txtUpdateTo.Text = row.Cells["p_To"].Value.ToString();
                            txtUpdateWeightRate.Text = row.Cells["p_WeightRate"].Value.ToString();
                            txtUpdateTripRate.Text = row.Cells["p_TripRate"].Value.ToString();
                            lblRateID.Text = row.Cells["p_RateID"].Value.ToString();
                        }
                    }

                }


            }
            
        }

        private void btnSubmitTrip_Click(object sender, EventArgs e)
        {
            if (btnSubmitTrip_Validiting())
            {
                DialogResult d = MessageBox.Show("Are you sure want to save this trip record?", "Information", MessageBoxButtons.YesNo);
                if (d == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(lblID.Text))
                    {
                        try
                        {
                            sa.CreatedBy = username.ToUpper();
                            sa.CreatedOn = DateTime.Now;

                            sa.LastChangeBy = username.ToUpper();
                            sa.LastChangeOn = DateTime.Now;

                            lib.insertNewSalary(sa.Date, sa.DriverID, sa.LorryID, sa.TripTypeID, sa.CommissionRate, sa.DONo, sa.DODate, sa.From, sa.To, sa.Goods, sa.Qty, sa.RateId, sa.Rate, sa.Amount, sa.CreatedBy, sa.CreatedOn, sa.LastChangeBy, sa.LastChangeOn, 1, sa.AdditionalRate);
                            MessageBox.Show("Add Trip Success!", "Success");
                            dtGvSalaryReport.DataSource = lib.disp_Salary();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        finally
                        {
                            resetSubmit();

                        }
                    }
                    else
                    {
                        try
                        {
                            sa.LastChangeBy = username.ToUpper();
                            sa.LastChangeOn = DateTime.Now;

                            lib.updateSalary( int.Parse(lblID.Text.ToString()), sa.Date, sa.DriverID, sa.LorryID, sa.TripTypeID, sa.CommissionRate, sa.DONo, sa.DODate, sa.From, sa.To, sa.Goods, sa.Qty, sa.RateId, sa.Rate, sa.Amount, sa.LastChangeBy, sa.LastChangeOn, 1, sa.AdditionalRate);
                            MessageBox.Show("Updated Trip Success!", "Success");
                            dtGvSalaryReport.DataSource = lib.disp_Salary();
                            dtGvSalaryReport2.DataSource = lib.disp_Salary();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        finally
                        {
                            resetSubmit();

                        }
                    }
                    

                }
            }
            //else
            //{
            //    lblMessage.Text = "Information incorrect, cannot submit!";
            //    lblMessage.Visible = true;
            //}

            report.CreateDocument(true);
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(lblID.Text))
            {
                MessageBox.Show("Please select a exist record first.");
            }

            else
            {
                DialogResult d = MessageBox.Show("Are you sure want to delete this trip record?", "Information", MessageBoxButtons.YesNo);
                if (d == DialogResult.Yes)
                {

                    try
                    {
                        lib.deleteSalary(int.Parse(lblID.Text.ToString()));
                        MessageBox.Show("The Trip is Deleted!", "Success");
                        dtGvSalaryReport.DataSource = lib.disp_Salary();
                    }
                    catch (Exception ex)
                    { MessageBox.Show(ex.Message);  }
                    finally
                    { resetSubmit();  }


                }
            }
        }

        private void resetSubmit()
        {
            cboxDriver.Text = string.Empty;
            cboxLorry.Text = string.Empty;
            txtDONo.Text  = string.Empty;
            cboxFrom.Text = string.Empty;
            cboxTo.Text = string.Empty;
            txtGoods.Text = string.Empty;
            txtQuantity.Text = string.Empty;
            txtAdditionalTrip.Text = string.Empty;
            lblAmountCount.Text = "0";
            lblTripRate.Text = "0";
            lblCommisionRate.Text = "0";
            lblID.Text = string.Empty;
            salblRateID.Text = string.Empty;
            lblMessage.Text = string.Empty;
            lblMessage.Visible = false;
        }

        private bool btnSubmitTrip_Validiting()
        {
            bool check = false;
            if (cboxDriver.Text == "" || cboxDriver.Text == null || cboxDriver.Text == string.Empty)
            {
                lblMessage.Text = "Must select a Driver.";
                check = false;
            }
            else if (cboxLorry.Text == "" || cboxLorry.Text == null || cboxLorry.Text == string.Empty)
            {
                lblMessage.Text = "Must select a Lorry.";
                check = false;
            }
            else if (cboxFrom.Text == "" || cboxFrom.Text == null || cboxFrom.Text == string.Empty)
            {
                lblMessage.Text = "Must select a From Destination.";
                check = false;
            }
            else if (cboxTo.Text == "" || cboxTo.Text == null || cboxTo.Text == string.Empty)
            {
                lblMessage.Text = "Must select a To Destination.";
                check = false;
            }
            else if (txtGoods.Text == "" || txtGoods.Text == null || txtGoods.Text == string.Empty)
            {
                lblMessage.Text = "Must fill in goods.";
                check = false;
            }
            else if (txtQuantity.Text == "" || txtQuantity.Text == null || txtQuantity.Text == string.Empty)
            {
                lblMessage.Text = "Must fill in Quantity.";
                check = false;
            }
            else if (string.IsNullOrEmpty(txtDONo.Text))
            {
                lblMessage.Text = "Must fill in DO No.";
                check = false;
            }
            else if (!string.IsNullOrEmpty(txtDONo.Text))
            {
                if (!string.IsNullOrEmpty(lblID.Text))  //update record validation only
                {
                    if (!lib.checkDOExistsfromID(txtDONo.Text.ToString(), int.Parse(lblID.Text)))
                    {
                        check = true;
                    }
                    else
                    {
                        MessageBox.Show("This DO No already existed, cannot input!", "Error");
                        check = false;
                    }
                }
                else if (!lib.checkDOExists(txtDONo.Text.ToString())) //insert record validation only
                {
                    check = true;
                }
                else
                {
                    MessageBox.Show("This DO No already existed, cannot input!", "Error");
                    check = false;
                }
            }
            else
            {
                check = true;
            }

            if (!check)
            {
                lblMessage.Visible = true;
            }
            return check;
        }

        private void btnSubmitDriver_Click(object sender, EventArgs e)
        {
            if (txtDriverName.Text != string.Empty && txtDriverIC.Text != string.Empty)
            {
                string strDriverID = lib.checkDriverExists(txtDriverName.Text);
                if (string.IsNullOrEmpty(strDriverID))
                {
                    DialogResult d = MessageBox.Show("Are you sure want to add this Driver?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        lib.insertNewDriver(txtDriverName.Text, txtDriverIC.Text, 1);
                        MessageBox.Show("Add Lorry Driver Success", "Success");
                        dtGvDriver.DataSource = lib.disp_driver();
                        txtDriverName.Text = txtDriverIC.Text = string.Empty;
                    }
                }
                else
                {
                    DialogResult d = MessageBox.Show("Are you sure want to update this Driver Information?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        lib.updateDriver(int.Parse(strDriverID), txtDriverName.Text, txtDriverIC.Text, 1); //status 1 = Active
                        MessageBox.Show("Update Lorry Driver Success", "Success");
                        dtGvDriver.DataSource = lib.disp_driver();
                        txtDriverName.Text = txtDriverIC.Text = string.Empty;
                    }
                }
                refreshData();
            }
            else
            {
                MessageBox.Show("Driver Name & IC cannot be blank!", "Error");
            }
        }

        private void btnDeleteDriver_Click(object sender, EventArgs e)
        {
            if (txtDriverName.Text != string.Empty && txtDriverIC.Text != string.Empty)
            {
                string strDriverID = lib.checkDriverExists(txtDriverName.Text);
                if (string.IsNullOrEmpty(strDriverID))
                {
                    DialogResult d = MessageBox.Show("This Driver haven't save into database, unable to delete driver.", "Error", MessageBoxButtons.OK);
                }
                else
                {
                    DialogResult d = MessageBox.Show("Are you sure want to delete this Driver Information permanently?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        try
                        {
                            lib.updateDriver(int.Parse(strDriverID), txtDriverName.Text, txtDriverIC.Text, 3); //status 3 = deactive
                            MessageBox.Show("Delete Lorry Driver Success", "Success");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.ToString());
                        }
                        finally
                        {
                            dtGvDriver.DataSource = lib.disp_driver();
                            txtDriverName.Text = txtDriverIC.Text = string.Empty;
                        }
                    }
                }
                refreshData();
            }
            else
            {
                MessageBox.Show("Driver Name & IC cannot be blank, delete driver failed!", "Error");
            }
        }

        private void btnSubmitLorry_Click(object sender, EventArgs e)
        {
            if (txtLorryNo.Text != string.Empty && txtCommissionRate.Text != string.Empty)
            {
                string strLorryID = lib.checkLorryExists(txtLorryNo.Text);
                if (string.IsNullOrEmpty(strLorryID))
                {
                    DialogResult d = MessageBox.Show("Are you sure want to add this Lorry?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        lib.insertNewLorry(txtLorryNo.Text, decimal.Parse(txtCommissionRate.Text), 2); // Status 2 is Waiting for Approval
                        MessageBox.Show("Add Lorry Success ", "Success");
                        dtGvLorry.DataSource = lib.disp_lorry();
                        txtLorryNo.Text = txtCommissionRate.Text = string.Empty;
                    }
                }
                else
                {
                    DialogResult d = MessageBox.Show("Are you sure want to update this Lorry Information?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        lib.updateLorry(int.Parse(strLorryID), txtLorryNo.Text, decimal.Parse(txtCommissionRate.Text), 2); // Status 4 is reject status
                        MessageBox.Show("Update Lorry Success", "Success");
                        dtGvLorry.DataSource = lib.disp_lorry();
                        txtLorryNo.Text = txtCommissionRate.Text = string.Empty;
                    }
                }
                refreshData();
            }
            else
            {
                MessageBox.Show("Lorry No & Commission Rate cannot be blank!", "Error");
            }
        }

        private void btnDeleteLorry_Click(object sender, EventArgs e)
        {
            if (txtLorryNo.Text != string.Empty && txtCommissionRate.Text != string.Empty)
            {
                string strLorryID = lib.checkLorryExists(txtLorryNo.Text);
                if (string.IsNullOrEmpty(strLorryID))
                {
                    DialogResult d = MessageBox.Show("This Lorry haven't save into database, unable to delete lorry.", "Error", MessageBoxButtons.OK);
                }
                else
                {
                    DialogResult d = MessageBox.Show("Are you sure want to delete this Lorry Information?", "Message", MessageBoxButtons.YesNo);
                    if (d == DialogResult.Yes)
                    {
                        try
                        {
                            lib.updateLorry(int.Parse(strLorryID), txtLorryNo.Text, decimal.Parse(txtCommissionRate.Text), 3); //3 is deactive status
                            MessageBox.Show("Delete Lorry Success", "Success");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.ToString());
                         }
                        finally
                        {
                            dtGvLorry.DataSource = lib.disp_lorry();
                            txtLorryNo.Text = txtCommissionRate.Text = string.Empty;
                        }
                    }
                }
                refreshData();
            }
            else
            {
                MessageBox.Show("Lorry No & Commission Rate cannot be blank!", "Error");
            }
        }

        private void gvApproveRate_SelectionChanged(object sender, EventArgs e)
        {
            if (gvApproveRate.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = gvApproveRate.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in gvApproveRate.SelectedRows)
                        {
                            lblApvFrom.Text = row.Cells["p_ApvFrom"].Value.ToString();
                            lblApvTo.Text = row.Cells["p_ApvTo"].Value.ToString();
                            lblApvWeight.Text = row.Cells["p_ApvWeight"].Value.ToString();
                            lblApvTrip.Text = row.Cells["p_ApvTrip"].Value.ToString();
                            lblApvRateID.Text = row.Cells["p_ApvRateID"].Value.ToString();
                        }
                    }

                }


            }
        }

        private void btnRejectRate_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to reject this rate?", "Warning", MessageBoxButtons.YesNo);
            if(d == DialogResult.Yes)
            {
                lib.updateRate(int.Parse(lblApvRateID.Text), lblApvFrom.Text, lblApvTo.Text, decimal.Parse(lblApvWeight.Text), Decimal.Parse(lblApvTrip.Text), 4); //4 is reject status
                MessageBox.Show("This Rate is Rejected.", "Message");
                gvApproveRate.DataSource = lib.disp_rate();
                refreshData();
            }
            
        }

        private void btnApproveRate_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to approve this rate?", "Warning", MessageBoxButtons.YesNo);
            if (d == DialogResult.Yes)
            {
                lib.updateRate(int.Parse(lblApvRateID.Text), lblApvFrom.Text, lblApvTo.Text, decimal.Parse(lblApvWeight.Text), Decimal.Parse(lblApvTrip.Text), 1); //4 is reject status
                MessageBox.Show("This Rate is Approved.", "Message");
                gvApproveRate.DataSource = lib.disp_rate();
                refreshData();
            }
        }

        private void dtGvDriver_SelectionChanged(object sender, EventArgs e)
        {
            if (dtGvDriver.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = dtGvDriver.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in dtGvDriver.SelectedRows)
                        {
                            lblDriverID.Text = row.Cells["p_DriverID"].Value.ToString();
                            txtDriverName.Text = row.Cells["p_DriverName"].Value.ToString();
                            txtDriverIC.Text = row.Cells["p_DriverIC"].Value.ToString();

                        }
                    }

                }
            }
        }

        private void dtGvLorry_SelectionChanged(object sender, EventArgs e)
        {
            if (dtGvLorry.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = dtGvLorry.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in dtGvLorry.SelectedRows)
                        {
                            lblLorryID.Text = row.Cells["p_LorryID"].Value.ToString();
                            txtLorryNo.Text = row.Cells["p_LorryNo"].Value.ToString();
                            txtCommissionRate.Text = row.Cells["p_CommissionRate"].Value.ToString();

                        }
                    }

                }
            }
        }

        private void dtGvApvLorry_SelectionChanged(object sender, EventArgs e)
        {
            if (dtGvApvLorry.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = dtGvApvLorry.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in dtGvApvLorry.SelectedRows)
                        {
                            lblApvLorryID.Text = row.Cells["p_ApvLorryID"].Value.ToString();
                            lblApvLorryNo.Text = row.Cells["p_ApvLorryNo"].Value.ToString();
                            lblApvComRate.Text = row.Cells["p_ApvCommissionRate"].Value.ToString();
                            lblApvStatus.Text = row.Cells["p_ApvStatus"].Value.ToString();

                        }
                    }

                }
            }
        }

        private void btnApprove_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to approve this Lorry?", "Warning", MessageBoxButtons.YesNo);
            if (d == DialogResult.Yes)
            {
                lib.updateLorry(int.Parse(lblApvLorryID.Text), lblApvLorryNo.Text, decimal.Parse(lblApvComRate.Text), 1); //4 is reject status
                MessageBox.Show("This Lorry is Approved.", "Message");
                dtGvApvLorry.DataSource = lib.disp_lorry();
                refreshData();
            }
        }

        private void cboxTo_SelectedIndexChanged(object sender, EventArgs e)
        {
            getTripRate();
            sa.To = cboxTo.Text.ToString().ToUpper();
            calculateAmountfrQty();
        }

        private void getTripRate()
        {
            DataTable p_tripRate = new DataTable();
            if (cboxFrom.Text != "" && cboxTo.Text != "")
            {
                switch (cboxTripType.Text)
                {
                    case "Trip":
                        p_tripRate = lib.getTripRate(cboxFrom.Text, cboxTo.Text, "TripRate", "Approved");
                        lblTripRate.Text = p_tripRate.Rows[0]["TripRate"].ToString();
                        sa.TripTypeID = 1;
                        break;
                    case "Ton":
                        p_tripRate = lib.getTripRate(cboxFrom.Text, cboxTo.Text, "WeightRate", "Approved");
                        lblTripRate.Text = p_tripRate.Rows[0]["WeightRate"].ToString();
                        sa.TripTypeID = 2;
                        break;
                    default:
                        break;
                }

                
                sa.Rate = decimal.Parse(lblTripRate.Text);
                sa.RateId = int.Parse( p_tripRate.Rows[0]["RateID"].ToString());
            }
        }

        public string disp_comm_rate()
        {
            string commisionrate = string.Empty;
            if (cboxLorry.Text != string.Empty || cboxLorry.Text != "")
            {
                try
                {
                    commisionrate = lib.getCommissionRate(cboxLorry.Text, "Approved");
                    //lblCommisionRate.Text = commisionrate;
                    
                }
                catch (Exception ex)
                {
                    
                    lblCommisionRateHeader.Text = "Failed to get" + cboxTripType.SelectedText + " Rate. System Error: " + ex.ToString();
                    lblCommisionRate.Visible = false;
                    lblCommisionRateUnit.Visible = false;
                }
                
            }
            return commisionrate;
           
        }

        private void cboxDriver_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboxDriver.Text != "")
            {
                DataRowView vrow = (DataRowView)cboxDriver.SelectedItem;
                DataRow dr = vrow.Row;
                sa.DriverID = int.Parse(dr["Id"].ToString());
            }
        }

        private void cboxLorry_SelectedIndexChanged(object sender, EventArgs e)
        {
            string temp             = disp_comm_rate();
            if (temp != "")
            {
                sa.CommissionRate = decimal.Parse(temp);
                lblCommisionRate.Text = temp;
            }
            if (cboxLorry.Text != "")
            {
                DataRowView vrow = (DataRowView)cboxLorry.SelectedItem;
                DataRow dr = vrow.Row;
                sa.LorryID = int.Parse(dr["LorryID"].ToString());
            }
        }

        private void cboxFrom_SelectedIndexChanged(object sender, EventArgs e)
        {
            disp_cbox_toDestination();
            if (cboxFrom.Text != "")
            {
                DataRowView vrow = (DataRowView)cboxFrom.SelectedItem;
                DataRow dr = vrow.Row;
                sa.From = dr["From"].ToString().ToUpper();
            }
            calculateAmountfrQty();
        }

        private void cboxTripType_SelectedIndexChanged(object sender, EventArgs e)
        {
            getTripRate();
            calculateAmountfrQty();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (MessageBox.Show("Are you sure you want to exist Lorry Salary System?", "Warning", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
                e.Cancel = true;
        }

        private void txtQuantity_TextChanged(object sender, EventArgs e)
        {
            calculateAmountfrQty();

        }

        private void calculateAmountfrQty()
        {
            if (txtQuantity.Text != "")
            {
                sa.Qty = decimal.Parse(txtQuantity.Text);
                decimal tmpAdditianolRate = 0;
                tmpAdditianolRate = Convert.ToDecimal(string.IsNullOrEmpty(txtAdditionalTrip.Text)? "0" : txtAdditionalTrip.Text);
                decimal temp = ( Decimal.Parse(lblTripRate.Text) + tmpAdditianolRate )  * Decimal.Parse(txtQuantity.Text);
                lblAmountCount.Text = temp.ToString("0.00");
                sa.Amount = decimal.Parse(lblAmountCount.Text);

            }
        }

        private void txtQuantity_KeyPress(object sender, KeyPressEventArgs e)
        {
            IsNumberOrDecimal(sender, e);
        }

        private static void IsNumberOrDecimal(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void cboxDriver_Validating(object sender, CancelEventArgs e)
        {
            if (cboxDriver.Text == "" || cboxDriver.Text == null || cboxDriver.Text == string.Empty)
            {
                lblMessage.Text = "Please select Driver.";
                lblMessage.Visible = true;
            }

            
        }

        private void cboxLorry_Validating(object sender, CancelEventArgs e)
        {
            if (cboxLorry.Text == "" || cboxLorry.Text == null || cboxLorry.Text == string.Empty)
            {
                lblMessage.Text = "Please select Lorry.";
                lblMessage.Visible = true;
            }

            
        }

        private void cboxFrom_Validating(object sender, CancelEventArgs e)
        {
            if (cboxFrom.Text == "" || cboxFrom.Text == null || cboxFrom.Text == string.Empty)
            {
                lblMessage.Text = "Please select a From Destination.";
                lblMessage.Visible = true;
            }

        }

        private void cboxTo_Validating(object sender, CancelEventArgs e)
        {
            if (cboxTo.Text == "" || cboxTo.Text == null || cboxTo.Text == string.Empty)
            {
                lblMessage.Text = "Please select a To Destination.";
                lblMessage.Visible = true;

            }

        }

        private void txtGoods_Validating(object sender, CancelEventArgs e)
        {
            if (txtGoods.Text == "" || txtGoods.Text == null || txtGoods.Text == string.Empty)
            {
                lblMessage.Text = "Please fill in goods.";
                lblMessage.Visible = true;

            }

        }

        private void txtQuantity_Validating(object sender, CancelEventArgs e)
        {
            if (txtQuantity.Text == "" || txtQuantity.Text == null || txtQuantity.Text == string.Empty)
            {
                lblMessage.Text = "Please fill in Quantity.";
                lblMessage.Visible = true;

            }

        }

        private void txtDONo_TextChanged(object sender, EventArgs e)
        {
            DOValidation();
        }

        private void DOValidation()
        {
            if (!string.IsNullOrEmpty(lblID.Text))  //update record validation only
            {
                if (!lib.checkDOExistsfromID(txtDONo.Text.ToString(), int.Parse(lblID.Text)))
                {
                    sa.DONo = txtDONo.Text.ToString();
                }
                else
                {
                    MessageBox.Show("This DO No already existed, cannot input!", "Error");
                }
            }
            else if (!lib.checkDOExists(txtDONo.Text.ToString())) //insert record validation only
            {
                sa.DONo = txtDONo.Text.ToString();
            }
            else
            {
                MessageBox.Show("This DO No already existed, cannot input!", "Error");
            }
        }

        private void dtPicDoDate_ValueChanged(object sender, EventArgs e)
        {
            sa.DODate = dtPicDoDate.Value;
        }

        private void dtPicDate_ValueChanged(object sender, EventArgs e)
        {
            sa.Date = dtPicDate.Value;
        }

        private void txtGoods_TextChanged(object sender, EventArgs e)
        {
            sa.Goods = txtGoods.Text;
        }

        private void cboxFilterDriver_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cboxFilterLorry_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            resetSubmit();
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {

        }

        private void cboxFilterDriver_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void dtGvApvLorry_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void lblCompanyTitle_Click(object sender, EventArgs e)
        {

        }

        public void disp_report_header()
        {
            DataTable dt = lib.disp_report_header();

            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    txtCompanyTitle.Text = dr["CompanyTitle"].ToString();
                    txtAddress1.Text = dr["AddressLine1"].ToString();
                    txtAddress2.Text = dr["AddressLine2"].ToString();
                    txtAddress3.Text = dr["AddressLine3"].ToString();
                    txtTel.Text = dr["Tel"].ToString();
                    txtFax.Text = dr["Fax"].ToString();
                    
                }
            }

        }

        private void btnUpdateRptHdr_Click(object sender, EventArgs e)
        {
            try
            {
                lib.updateReportHeader(1, txtCompanyTitle.Text.ToString(), txtAddress1.Text.ToString(), txtAddress2.Text.ToString(), txtAddress3.Text.ToString(), txtTel.Text.ToString(), txtFax.Text.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                MessageBox.Show("Report Header is updated successfully!" + "\n" + "Please close Lorry Salary System and re-open again.", "Information", MessageBoxButtons.OK);
                disp_report_header();
                report.CreateDocument(true);
            }

        }

        private void dtDVUser_SelectionChanged(object sender, EventArgs e)
        {
            if (dtDVUser.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = dtDVUser.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in dtDVUser.SelectedRows)
                        {
                            txtUserName.Text = row.Cells["UserName"].Value.ToString();
                            //txtPassword.Text = row.Cells["Password"].Value.ToString();
                            if (row.Cells["RoleName"].Value.ToString() == "Admin")
                            {
                                rbtnGeneral.Checked = false;
                                rbtnAdmin.Checked = true;
                            }
                            else {
                                rbtnGeneral.Checked = true;
                                rbtnAdmin.Checked = false;
                            }
                            lblUserID_hidden.Text = row.Cells["UserID"].Value.ToString();
                            lblUsername_hidden.Text = row.Cells["UserName"].Value.ToString();
                            lblUserStatus_hidden.Text = row.Cells["StatusName"].Value.ToString();
                            lblRoleName_hidden.Text = row.Cells["RoleName"].Value.ToString();
                            lblRoleID_hidden.Text = row.Cells["RoleID"].Value.ToString();
                        }
                    }

                }


            }
        }

        private void dtDVUser_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void txtPassword_TextChanged(object sender, EventArgs e)
        {

        }

        private void label2_Click_1(object sender, EventArgs e)
        {

        }

        private void dtGvSalaryReport_SelectionChanged(object sender, EventArgs e)
        {
            if (dtGvSalaryReport.SelectedRows.Count > 0)
            {
                DataGridViewRow currentRow = dtGvSalaryReport.SelectedRows[0];
                if (currentRow.Cells.Count > 0)
                {
                    bool rowIsEmpty = true;

                    foreach (DataGridViewCell cell in currentRow.Cells)
                    {
                        if (cell.Value.ToString() != string.Empty || cell.Value != null)
                        {
                            rowIsEmpty = false;
                            break;
                        }
                    }

                    if (!rowIsEmpty) //is not empty
                    {

                        foreach (DataGridViewRow row in dtGvSalaryReport.SelectedRows)
                        {
                            //lblDriverID.Text = row.Cells["p_DriverID"].Value.ToString();
                            //txtDriverName.Text = row.Cells["p_DriverName"].Value.ToString();
                            //txtDriverIC.Text = row.Cells["p_DriverIC"].Value.ToString();
                            lblID.Text                  = row.Cells["saID"].Value.ToString();
                            dtPicDate.Value             = DateTime.Parse(row.Cells["saDate"].Value.ToString());
                            cboxDriver.SelectedValue    = row.Cells["saDriverName"].Value.ToString();
                            cboxLorry.SelectedValue     = row.Cells["saLorryNo"].Value.ToString();
                            cboxTripType.Text           = row.Cells["saTripType"].Value.ToString();
                            lblCommisionRate.Text       = row.Cells["saCommRate"].Value.ToString();
                            txtDONo.Text                = row.Cells["saDONo"].Value.ToString();
                            dtPicDoDate.Value           = DateTime.Parse(row.Cells["saDODate"].Value.ToString());
                            cboxFrom.SelectedValue      = row.Cells["saFrom"].Value.ToString();
                            cboxTo.SelectedValue        = row.Cells["saTo"].Value.ToString();
                            txtGoods.Text               = row.Cells["saGoods"].Value.ToString();
                            txtQuantity.Text            = row.Cells["saQty"].Value.ToString();
                            salblRateID.Text            = row.Cells["saRateID"].Value.ToString();
                            lblTripRate.Text            = row.Cells["saRate"].Value.ToString();
                            txtAdditionalTrip.Text      = row.Cells["saAdditionalRate"].Value.ToString();
                            lblAmountCount.Text         = row.Cells["saAmount"].Value.ToString();

                            //username       = row.Cells["saLastChangeBy"].Value.ToString();
                            //currentdate    = row.Cells["saLastChangeOn"].Value.ToString();


                        }
                    }

                }
            }
        }

        private void button1_Click(object sender, EventArgs e) //Mass Delete form
        {
            DataTable dt = lib.disp_search_salary(dateTimePicker3.Value.ToString("yyyy-MM-dd"), dateTimePicker4.Value.ToString("yyyy-MM-dd"), cboxFilterDriver2.Text, cboxFilterLorry2.Text);
            dtGvSalaryReport2.DataSource = dt;

            MessageBox.Show("Search Result Success!", "Success");
        }

        private void txtAdditionalTrip_TextChanged(object sender, EventArgs e)
        {

            if (!string.IsNullOrEmpty(txtAdditionalTrip.Text))
            {
                sa.AdditionalRate = Decimal.Parse(txtAdditionalTrip.Text);
            }
            else
            {
                sa.AdditionalRate = 0;
            }
            calculateAmountfrQty();
        }

        private void txtAdditionalTrip_KeyPress(object sender, KeyPressEventArgs e)
        {
            IsNumberOrDecimal(sender, e);
        }

        private void btnMassDelete_Click(object sender, EventArgs e)
        {

            if (MessageBox.Show("Are you sure to delete record?", "Warning", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
            {
                List<string> id = new List<string>();
                DataGridViewSelectedRowCollection rows = dtGvSalaryReport2.SelectedRows;
                foreach (DataGridViewRow row in rows)
                {
                    DataRow myRow = (row.DataBoundItem as DataRowView).Row;
                    id.Add(myRow.Field<int>("ID").ToString());
                }

                string sb;

                sb = string.Join(",", id);

                try
                {
                    lib.massDeleteSalary(sb);
                    MessageBox.Show("Delete Record Success!", "Success");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
                finally
                {
                    dtGvSalaryReport.DataSource = lib.disp_Salary();
                    dtGvSalaryReport2.DataSource = lib.disp_Salary();
                }
            }


        }

        private void tabPage8_Click(object sender, EventArgs e)
        {
            //Form2 fm = new Form2();
            //fm.Show();
        }

        private void printPreviewBarItem59_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {
            FormReportSummaryTrip fm = new FormReportSummaryTrip();
            fm.Show();
        }

        private void tabControl5_Click(object sender, EventArgs e)
        {
           
        }

        private void tabControl5_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ( tabControl5.SelectedTab == tabControl5.TabPages["tabPage8"])
            {
                FormReportSummaryTrip fm = new FormReportSummaryTrip();
                fm.Show();
            }
            else if (tabControl5.SelectedTab == tabControl5.TabPages["tabPage9"])
            {
                FormReportSummaryTon fm = new FormReportSummaryTon();
                fm.Show();
            }

        }

        private void button4_Click(object sender, EventArgs e)
        {
            FormReportSummaryTon fm = new FormReportSummaryTon();
            fm.Show();
        }

        private void btnDeleteRate_Click(object sender, EventArgs e)
        {
            DialogResult d = MessageBox.Show("Are you sure want to Delete this Rate?", "Information", MessageBoxButtons.YesNo);
            if (d == DialogResult.Yes)
            {
                lib.updateRate(int.Parse(lblRateID.Text), txtUpdateFrom.Text, txtUpdateTo.Text, Decimal.Parse(txtUpdateWeightRate.Text.ToString()), Decimal.Parse(txtUpdateTripRate.Text.ToString()), 3);
                GVSetupRate.DataSource = lib.disp_rate();
                MessageBox.Show("Suceess to Delete Rate", "Success", MessageBoxButtons.OK);
            }
        }
    }
}
